{"version":3,"sources":["Lobby.js","Participant.js","Controls/index.js","Room.js","VideoChat.js","App.js","serviceWorker.js","index.js","assets/icons/logo_webbanner.png","assets/icons/1on1_asset.svg","assets/icons/MIC_ON.svg","assets/icons/MIC_OFF.svg","assets/icons/VIDEO_ON.svg","assets/icons/VIDEO_OFF.svg","assets/icons/SCREENSHARE_ON.svg","assets/icons/SCREENSHARE_OFF.svg","assets/icons/ENDCALL.svg"],"names":["Lobby","username","handleUsernameChange","roomName","handleRoomNameChange","handleSubmit","className","src","logo","width","onSubmit","type","id","placeholder","value","onChange","required","VirtualRehab","style","height","background","Participant","participant","handleCallDisconnect","handleAudioToggle","handleVideoToggle","toggleAudio","toggleVideo","isLocal","isSharingScreen","console","log","useState","videoTracks","setVideoTracks","audioTracks","setAudioTracks","videoRef","useRef","screenRef","audioRef","trackpubsToTracks","trackMap","Array","from","map","publication","track","filter","useEffect","values","trackSubscribed","event","kind","trackUnsubscribed","v","a","on","removeAllListeners","shouldUnsub","getTrackByName","name","reduce","acc","cur","getScreenTrack","t","isEnabled","videoTrack","screenTrack","wTrack","attach","current","push","forEach","detach","audioTrack","color","identity","ref","autoPlay","display","Controls","audio","video","screen","handleScreenToggle","Circle","onClick","Image","Video","VideoOff","Mic","MicOff","Screen","ScreenOff","End","styled","div","img","Room","token","handleLogout","room","setRoom","participants","setParticipants","setToggleAudio","setToggleVideo","toggleScreenShare","setToggleScreenShare","screenStream","setScreenStream","participantConnected","prevParticipants","participantDisconnected","p","connect","then","currentRoom","localParticipant","state","tracks","trackPublication","stop","disconnect","window","close","disable","enable","trackName","remoteParticipants","key","sid","navigator","mediaDevices","getDisplayMedia","_screenStream","getVideoTracks","length","publishTrack","VideoChat","setUsername","setRoomName","setToken","useCallback","target","preventDefault","fetch","method","body","JSON","stringify","headers","res","json","data","render","App","Boolean","location","hostname","match","ReactDOM","document","getElementById","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"kQA0DeA,MAtDD,EACZC,WACAC,uBACAC,WACAC,uBACAC,kBAGE,6BACA,yBAAKC,UAAU,gBACX,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,UACf,yBAAKC,IAAKC,IAAMC,MAAM,YAI5B,0BAAMC,SAAUL,GAChB,yBAAKC,UAAU,sCAAf,wBACE,yBAAKA,UAAU,iBACb,2BACEK,KAAK,OACLC,GAAG,QACHC,YAAY,oBACZC,MAAOb,EACPc,SAAUb,EACVc,UAAQ,KAIZ,6BACE,2BACEL,KAAK,OACLC,GAAG,OACHC,YAAY,YACZC,MAAOX,EACPY,SAAUX,EACVY,UAAQ,KAIZ,yBAAKV,UAAU,8BAAf,sEACA,gCACE,yBAAKC,IAAKU,IAAcC,MAAO,CAC7BC,OAAO,WAGX,yBAAKb,UAAU,6BACf,4BAAQY,MAAqB,KAAbjB,GAAgC,KAAbE,EAAkB,CAACiB,WAAY,WAAa,KAAOd,UAAU,eAAeK,KAAK,UAApH,sB,iBCsFSU,MAtIK,EAClBC,cACAC,uBACAC,oBACAC,oBACAC,cACAC,cACAC,UACAC,sBAGEC,QAAQC,IAAI,iBAFV,QAIkCC,mBAAS,IAJ3C,mBAIGC,EAJH,KAIgBC,EAJhB,OAKkCF,mBAAS,IAL3C,mBAKGG,EALH,KAKgBC,EALhB,KAOEC,EAAWC,mBACXC,EAAYD,mBACZE,EAAWF,mBAEXG,EAAoBC,GACxBC,MAAMC,KAAKF,GACRG,IAAIC,GAAeA,EAAYC,OAC/BC,OAAOD,GAAmB,OAAVA,GAqGrB,OAnGAE,oBAAU,KAGRf,EAAeO,EAAkBnB,EAAYW,YAAYiB,WACzDd,EAAeK,EAAkBnB,EAAYa,YAAYe,WACvDpB,QAAQC,IAAIT,GAEd,MAAM6B,EAAkBC,IAEtB,MAAML,EAAQK,EAAML,MAAQK,EAAML,MAAQK,EAEvB,UAAfL,EAAMM,KACRnB,EAAeD,GAAe,IAAIA,EAAac,IAE/CX,EAAeD,GAAe,IAAIA,EAAaY,KAI7CO,EAAoBF,IACxB,MAAML,EAAQK,EAAML,MAAQK,EAAML,MAAQK,EAEvB,UAAfL,EAAMM,KACRnB,EAAeD,GAAeA,EAAYe,OAAOO,GAAKA,IAAMR,IAE5DX,EAAeD,GAAeA,EAAYa,OAAOQ,GAAKA,IAAMT,KAYhE,OAPAnB,GAAWN,EAAYmC,GAAG,iBAAkBN,GAC5CvB,GAAWN,EAAYmC,GAAG,mBAAoBH,IAG7C1B,GAAWN,EAAYmC,GAAG,kBAAmBN,IAC7CvB,GAAWN,EAAYmC,GAAG,oBAAqBH,GAEzC,KACLpB,EAAe,IACfE,EAAe,IACfd,EAAYoC,uBAEb,CAACpC,IAEJ2B,oBAAU,KACRnB,QAAQC,IAAI,wBAAyBE,GACrC,IAAI0B,EAAc,GAEhB,MAAMC,EAAkBC,GAAS5B,EAAY6B,OAAO,CAACC,EAAKC,IAAQD,IAAYC,EAAIH,OAASA,EAAOG,EAAMD,GAAK,MACvGE,EAAiB,KACnB,MAAMC,EAAIN,EAAe,UAEzB,OAAOM,GAAKA,EAAEC,UAAYD,EAAIN,EAAe,WAEjD9B,QAAQC,IAAIF,EAAiBD,GAC7B,MAGIwC,EAHwBxC,EAAUgC,EAAe,UAAYK,IAI7DI,EAAcJ,IAyBpB,OAvBGrC,GAAWyC,GAAeA,EAAYZ,GAAG,WAAaS,IACnDpC,QAAQC,IAAI,mCACZ,MAAMuC,EAASV,EAAe,UAC9BU,GAAUA,EAAOC,OAAOlC,EAASmC,YAGpC5C,GAAWyC,GAAeA,EAAYZ,GAAG,UAAYS,IAClDpC,QAAQC,IAAI,kCACZsC,EAAYE,OAAOlC,EAASmC,WAGhC1C,QAAQC,IAAIE,EAAamC,EAAYC,GACnCD,IACFA,EAAWG,OAAOlC,EAASmC,SAC3Bb,EAAYc,KAAKL,IAGfC,IACFvC,QAAQC,IAAI,WAAYQ,EAAWA,EAAUiC,SAC7Cb,EAAYc,KAAKJ,GACjBA,EAAYE,OAAOhC,EAAUiC,UAGxB,KACLb,EAAYe,QAAQ3B,GAASA,GAASA,EAAM4B,YAE7C,CAAC1C,IAEJgB,oBAAU,KACR,MAAM2B,EAAazC,EAAY,GAE/B,GAAIyC,EAEF,OADAA,EAAWL,OAAO/B,EAASgC,SACpB,KACLI,EAAWD,WAGd,CAACxC,IAGF,6BACA,yBAAK7B,UAAU,2CAA2CY,MAAO,CAAE2D,MAAO,UAAYvD,EAAYwD,UAChG,2BAAOC,IAAKxC,EAAWyC,UAAU,EAAM9D,MAAO,CAAE+D,QAAQ,GAAD,OAAKpD,EAAkB,QAAU,WACxF,2BAAOkD,IAAK1C,EAAU2C,UAAU,IAChC,2BAAOD,IAAKvC,EAAUwC,UAAU,M,6fC5FvBE,MA9BE,EACf3D,uBACAC,oBACAC,oBACA0D,QACAC,QACAC,SACAC,wBAIE,oCACE,yBAAKhF,UAAU,WACb,kBAACiF,EAAD,CAAQjF,UAAU,SAASkF,QAAS/D,GAClC,kBAACgE,EAAD,CAAOlF,IAAK6E,EAAQM,IAAQC,OAE9B,kBAACJ,EAAD,CAAQjF,UAAU,SAASkF,QAAShE,GAClC,kBAACiE,EAAD,CAAOlF,IAAK4E,EAAQS,IAAMC,OAE5B,kBAACN,EAAD,CAAQjF,UAAU,SAASkF,QAASF,GAClC,kBAACG,EAAD,CAAOlF,IAAK8E,EAASS,IAASC,OAEhC,kBAACR,EAAD,CAAQjF,UAAU,SAASkF,QAASjE,GAClC,kBAACkE,EAAD,CAAOlF,IAAKyF,SAStB,MACET,EAASU,IAAOC,IAAV,KAUNT,EAAQQ,IAAOE,IAAV,KC6LQC,MA7OF,EAAGjG,WAAUkG,QAAOC,mBAAoB,MAAD,EAC1BtE,mBAAS,MADiB,mBAC3CuE,EAD2C,KACrCC,EADqC,OAEVxE,mBAAS,IAFC,mBAE3CyE,EAF2C,KAE7BC,EAF6B,OAGZ1E,oBAAS,GAHG,mBAG3CN,EAH2C,KAG9BiF,EAH8B,OAIZ3E,oBAAS,GAJG,mBAI3CL,EAJ2C,KAI9BiF,EAJ8B,OAKA5E,oBAAS,GALT,mBAK3C6E,EAL2C,KAKxBC,EALwB,OAMV9E,mBAAS,MANC,mBAM3C+E,EAN2C,KAM7BC,EAN6B,KAQlD/D,oBAAU,KACR,MAAMgE,EAAuB3F,IAC3BoF,EAAgBQ,GAAoB,IAAIA,EAAkB5F,KAGtD6F,EAA0B7F,IAE9BoF,EAAgBQ,GACdA,EAAiBlE,OAAOoE,GAAKA,IAAM9F,KAmBvC,OAPEoE,IAAM2B,QAAQhB,EAAO,CAAExC,KAAM1D,EAAUgF,OAAO,EAAMC,MAAO,CAAEvB,KAAM,YAAcyD,KAAKf,IACtFC,EAAQD,GACRA,EAAK9C,GAAG,uBAAwBwD,GAChCV,EAAK9C,GAAG,0BAA2B0D,GACnCZ,EAAKE,aAAa/B,QAAQuC,KAGrB,KACLT,EAAQe,GACFA,GAAsD,cAAvCA,EAAYC,iBAAiBC,OAC9CF,EAAYC,iBAAiBE,OAAOhD,SAAQ,SAC1CiD,GAEAA,EAAiB5E,MAAM6E,UAEzBL,EAAYM,aACL,MAEAN,KAIZ,CAACpH,EAAUkG,IAEd,MAAM9E,EAAuB,KAC3B+E,IACAC,EAAKsB,aACLC,OAAOC,SAGHvG,EAAoB,KACxB+E,EAAKiB,iBAAiBrF,YAAYuC,QAAQ3B,IACpCA,EAAMA,MAAMoB,UACdpB,EAAMA,MAAMiF,UAEZjF,EAAMA,MAAMkF,SAEdtB,EAAe5D,EAAMA,MAAMoB,cAIzB1C,EAAoB,KACxB8E,EAAKiB,iBAAiBvF,YAAYyC,QAAQ3B,IACtCjB,QAAQC,IAAIgB,GACVA,EAAMA,MAAMoB,WAAiC,WAApBpB,EAAMmF,UACjCnF,EAAMA,MAAMiF,UAEZjF,EAAMA,MAAMkF,SAEdrB,EAAe7D,EAAMA,MAAMoB,cAuHzBgE,EAAqB1B,EAAa5D,IAAIvB,GAC1C,kBAAC,EAAD,CACE8G,IAAK9G,EAAY+G,IACjB/G,YAAaA,EACbM,SAAS,KAIb,OACE,yBAAKtB,UAAU,QACb,yBAAKA,UAAU,qBACZiG,EACC,kBAAC,EAAD,CACE6B,IAAK7B,EAAKiB,iBAAiBa,IAC3B/G,YAAaiF,EAAKiB,iBAClBhG,kBAAmBA,EACnBC,kBAAmBA,EACnBF,qBAAsBA,EACtBG,YAAaA,EACbC,YAAaA,EACbC,SAAS,EACTC,gBAAiBgF,IAGnB,IAGJ,yBAAKvG,UAAU,uBAAuB6H,GACtC,kBAAC,EAAD,CACI5G,qBAAsBA,EACtBC,kBAAmBA,EACnBC,kBAAmBA,EACnB6D,mBAnJoB,KAEtByB,EACAR,EAAKiB,iBAAiBvF,YAAYyC,QAAQ3B,IACtCjB,QAAQC,IAAIgB,GACRA,EAAMA,MAAMoB,WAAiC,WAApBpB,EAAMmF,UAC/BnF,EAAMA,MAAMiF,UAEZjF,EAAMA,MAAMkF,SAEhBnB,EAAqB/D,EAAMA,MAAMoB,aAKvCmE,UAAUC,aAAaC,kBAAkBlB,KAAKmB,IAE5C,GADA3G,QAAQC,IAAI0G,GACRA,EAAe,CACjB,MAAMpE,EAAcoE,EAAcC,iBAAiB,GAC7ChB,EAAS/E,MAAMC,KAAK2D,EAAKiB,iBAAiBvF,YAAYiB,UAC5DpB,QAAQC,IAAI,eAAgBsC,GAC5ByD,OAAOvB,KAAOA,EAIVmB,EAAOiB,OAQXpC,EAAKiB,iBAAiBoB,aAAavE,EAAa,CAAER,KAAM,WACxDiD,GAAqB,GAErBhF,QAAQC,IAAK+F,OAAOvB,KAAMA,EAAM,kBAAmBlC,GASnD2C,EAAgByB,OAuGhBtD,MAAOzD,EACP0D,MAAOzD,EACP0D,OAAQwB,MClLHgC,MAtDG,KAAO,MAAD,EACU7G,mBAAS,IADnB,mBACf/B,EADe,KACL6I,EADK,OAEU9G,mBAAS,IAFnB,mBAEf7B,EAFe,KAEL4I,EAFK,OAGI/G,mBAAS,MAHb,mBAGfqE,EAHe,KAGR2C,EAHQ,KAKhB9I,EAAuB+I,sBAAY7F,IACvC0F,EAAY1F,EAAM8F,OAAOpI,QACxB,IAEGV,EAAuB6I,sBAAY7F,IACvC2F,EAAY3F,EAAM8F,OAAOpI,QACxB,IAEGT,EAAe4I,sBAAW,uCAC9B,WAAM7F,GAAN,eAAAI,EAAA,6DACEJ,EAAM+F,iBADR,SAEuBC,MAAM,eAAgB,CACzCC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnB1E,SAAU7E,EACVsG,KAAMpG,IAERsJ,QAAS,CACP,eAAgB,sBAEjBnC,KAAKoC,GAAOA,EAAIC,QAXrB,OAEUC,EAFV,OAYEZ,EAASY,EAAKvD,OAZhB,2CAD8B,sDAe9B,CAAClG,EAAUF,IAGPqG,EAAe2C,sBAAY7F,IAC/B4F,EAAS,OACR,IAEH,IAAIa,EAgBJ,OAdEA,EADExD,EAEA,kBAAC,EAAD,CAAMlG,SAAUA,EAAUkG,MAAOA,EAAOC,aAAcA,IAItD,kBAAC,EAAD,CACErG,SAAUA,EACVE,SAAUA,EACVD,qBAAsBA,EACtBE,qBAAsBA,EACtBC,aAAcA,IAIbwJ,GCzCMC,MAVH,IAER,yBAAKxJ,UAAU,OACb,8BACE,kBAAC,EAAD,QCEYyJ,QACW,cAA7BjC,OAAOkC,SAASC,UAEe,UAA7BnC,OAAOkC,SAASC,UAEhBnC,OAAOkC,SAASC,SAASC,MACvB,2DCVNC,IAASN,OAAO,kBAAC,EAAD,MAASO,SAASC,eAAe,SDmH3C,kBAAmB/B,WACrBA,UAAUgC,cAAcC,MAAMjD,KAAKkD,IACjCA,EAAaC,gB,mBE3HnBC,EAAOC,QAAU,IAA0B,4C,mBCA3CD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,4C,mBCA3CD,EAAOC,QAAU,IAA0B,6C,mBCA3CD,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.32ee26ef.chunk.js","sourcesContent":["import React from 'react';\nimport logo from \"./assets/icons/logo_webbanner.png\";\nimport VirtualRehab from \"./assets/icons/1on1_asset.svg\"\n\nconst Lobby = ({\n  username,\n  handleUsernameChange,\n  roomName,\n  handleRoomNameChange,\n  handleSubmit\n}) => {\n  return (\n    <div>\n    <div className=\"home-nav-bar\">\n        <div className=\"margin-top-8\">\n          <div className=\"center\">\n          <img src={logo} width=\"96px\" ></img>\n          </div>\n          </div>\n        </div>\n    <form onSubmit={handleSubmit}>\n    <div className=\"margin-top-64 futura-20-900 center\">Virtual Rehab 1-on-1</div>\n      <div className=\"margin-top-16\">\n        <input\n          type=\"text\"\n          id=\"field\"\n          placeholder=\"Your Display Name\"\n          value={username}\n          onChange={handleUsernameChange}\n          required\n        />\n      </div>\n\n      <div>\n        <input\n          type=\"text\"\n          id=\"room\"\n          placeholder=\"Room Name\"\n          value={roomName}\n          onChange={handleRoomNameChange}\n          required\n        />\n      </div>\n\n      <div className=\"margin-top-8 futura-14-300\">* Enter the room name you were given from your confirmation email.</div>\n      <center>\n        <img src={VirtualRehab} style={{\n          height:\"25vh\"\n        }}></img>\n      </center>\n      <div className=\"onboarding-bottom-nav-bar\">\n      <button style={ username === \"\" || roomName === \"\" ? {background: \"#E1E2E3\"} : null } className=\"green-button\" type=\"submit\">JOIN VIDEO CALL</button>\n      </div>\n    </form>\n    </div>\n  );\n};\n\nexport default Lobby;\n","import React, { useState, useEffect, useRef } from \"react\";\n\n\nconst Participant = ({\n  participant,\n  handleCallDisconnect,\n  handleAudioToggle,\n  handleVideoToggle,\n  toggleAudio,\n  toggleVideo,\n  isLocal,\n  isSharingScreen\n}) => {\n\n    console.log('refresh ?????');\n\n  const [videoTracks, setVideoTracks] = useState([]);\n  const [audioTracks, setAudioTracks] = useState([]);\n\n  const videoRef = useRef();\n  const screenRef = useRef();\n  const audioRef = useRef();\n\n  const trackpubsToTracks = trackMap =>\n    Array.from(trackMap)\n      .map(publication => publication.track)\n      .filter(track => track !== null);\n\n  useEffect(() => {\n    // Lots of things were wrong because Twilio-Video v1 differs a lot from Twilio-Video v2\n    // https://www.twilio.com/docs/video/migrating-1x-2x \n    setVideoTracks(trackpubsToTracks(participant.videoTracks.values()));\n    setAudioTracks(trackpubsToTracks(participant.audioTracks.values()));\n      console.log(participant);\n\n    const trackSubscribed = event => {\n      // trackPublished emits a publication as first param while trackSubscribed emits a track\n      const track = event.track ? event.track : event;\n\n      if (track.kind === \"video\") {\n        setVideoTracks(videoTracks => [...videoTracks, track]);\n      } else {\n        setAudioTracks(audioTracks => [...audioTracks, track]);\n      }\n    };\n\n    const trackUnsubscribed = event => {\n      const track = event.track ? event.track : event;\n\n      if (track.kind === \"video\") {\n        setVideoTracks(videoTracks => videoTracks.filter(v => v !== track));\n      } else {\n        setAudioTracks(audioTracks => audioTracks.filter(a => a !== track));\n      }\n    };\n\n    // LocalParticipant won't subscribe to tracks, they should use the track as soon as it's published\n    isLocal && participant.on(\"trackPublished\", trackSubscribed);\n    isLocal && participant.on(\"trackUnpublished\", trackUnsubscribed);\n\n    // RemoteParticipant can only consume a track after it has been succesfully subscribed to\n    !isLocal && participant.on(\"trackSubscribed\", trackSubscribed);\n    !isLocal && participant.on(\"trackUnsubscribed\", trackUnsubscribed);\n\n    return () => {\n      setVideoTracks([]);\n      setAudioTracks([]);\n      participant.removeAllListeners();\n    };\n  }, [participant]);\n\n  useEffect(() => {\n    console.log('attaching video track', videoTracks);\n    let shouldUnsub = [];\n    // const localTracks = Array.from(participant.videoTracks.values()).map(v => v.track);\n      const getTrackByName = (name) => videoTracks.reduce((acc, cur) => acc ? acc : cur.name === name ? cur : acc, null);\n      const getScreenTrack = () => {\n          const t = getTrackByName('screen');\n          // Fallback to webcam if there is no screen\n          return t && t.isEnabled ? t : getTrackByName('webcam');\n      };\n      console.log(isSharingScreen, isLocal);\n      const getVideoTrack = () => isLocal ? getTrackByName('webcam') : getScreenTrack();\n\n\n    const videoTrack = getVideoTrack();\n    const screenTrack = getScreenTrack();\n\n      !isLocal && screenTrack && screenTrack.on('disabled', (t) => {\n          console.log('remote screenTrack was disabled')\n          const wTrack = getTrackByName('webcam');\n          wTrack && wTrack.attach(videoRef.current)\n      })\n\n      !isLocal && screenTrack && screenTrack.on('enabled', (t) => {\n          console.log('remote screenTrack was enabled')\n          screenTrack.attach(videoRef.current)\n      })\n\n      console.log(videoTracks, videoTrack, screenTrack);\n    if (videoTrack) {\n      videoTrack.attach(videoRef.current);\n      shouldUnsub.push(videoTrack);\n    }\n\n    if (screenTrack) {\n      console.log('screnRef', screenRef, screenRef.current)\n      shouldUnsub.push(screenTrack);\n      screenTrack.attach(screenRef.current);\n    }\n\n    return () => {\n      shouldUnsub.forEach(track => track && track.detach())\n    }\n  }, [videoTracks]);\n\n  useEffect(() => {\n    const audioTrack = audioTracks[0];\n\n    if (audioTrack) {\n      audioTrack.attach(audioRef.current);\n      return () => {\n        audioTrack.detach();\n      };\n    }\n  }, [audioTracks]);\n\n  return (\n    <div>\n    <div className=\"futura-20-900 margin-top-8 margin-left-8\" style={{ color: \"white\" }}>{participant.identity}</div>\n      <video ref={screenRef} autoPlay={true} style={{ display: `${isSharingScreen ? 'block' : 'none'}`}}/>\n      <video ref={videoRef} autoPlay={true} />\n      <audio ref={audioRef} autoPlay={true} />\n    </div>\n  );\n};\n\nexport default Participant;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Mic from \"../assets/icons/MIC_ON.svg\";\nimport MicOff from \"../assets/icons/MIC_OFF.svg\";\nimport Video from \"../assets/icons/VIDEO_ON.svg\";\nimport VideoOff from \"../assets/icons/VIDEO_OFF.svg\";\nimport ScreenOff from \"../assets/icons/SCREENSHARE_ON.svg\";\nimport Screen from \"../assets/icons/SCREENSHARE_OFF.svg\";\nimport End from \"../assets/icons/ENDCALL.svg\";\n\nconst Controls = ({\n  handleCallDisconnect,\n  handleAudioToggle,\n  handleVideoToggle,\n  audio,\n  video,\n  screen,\n  handleScreenToggle\n}) => {\n\n  return (\n    <>\n      <div className=\"control\">\n        <Circle className=\"column\" onClick={handleVideoToggle}>\n          <Image src={video ? Video : VideoOff} />\n        </Circle>\n        <Circle className=\"column\" onClick={handleAudioToggle}>\n          <Image src={audio ? Mic : MicOff} />\n        </Circle>\n        <Circle className=\"column\" onClick={handleScreenToggle}>\n          <Image src={screen ? Screen : ScreenOff} />\n        </Circle>\n        <Circle className=\"column\" onClick={handleCallDisconnect}>\n          <Image src={End} />\n        </Circle>\n      </div>\n    </>\n  );\n};\n\nexport default Controls;\n\nconst \n  Circle = styled.div`\n    width: 45px;\n    height: 45px;\n    border-radius: 50%;\n    display: flex;\n    cursor: pointer;\n    :not(:first-child) {\n      margin-left: 20px;\n    }\n  `,\n  Image = styled.img`\n    max-width: 100%;\n    width: 45px;\n    margin: 0 auto;\n  `;\n","import React, { useState, useEffect } from \"react\";\nimport Video from \"twilio-video\";\nimport Participant from \"./Participant\";\nimport Controls from \"./Controls\";\n\nconst Room = ({ roomName, token, handleLogout }) => {\n  const [room, setRoom] = useState(null);\n  const [participants, setParticipants] = useState([]);\n  const [toggleAudio, setToggleAudio] = useState(true);\n  const [toggleVideo, setToggleVideo] = useState(true);\n  const [toggleScreenShare, setToggleScreenShare] = useState(false);\n  const [screenStream, setScreenStream] = useState(null);\n\n  useEffect(() => {\n    const participantConnected = participant => {\n      setParticipants(prevParticipants => [...prevParticipants, participant]);\n    };\n\n    const participantDisconnected = participant => {\n\n      setParticipants(prevParticipants =>\n        prevParticipants.filter(p => p !== participant)\n      );\n    };\n    /*\n    const opts = { name: roomName };\n    if (screenStream) {\n      console.log(screenStream);\n      alert('screen share')\n      opts.tracks = screenStream.getTracks();\n    }\n    */\n\n      Video.connect(token, { name: roomName, audio: true, video: { name: 'webcam' } }).then(room => {\n      setRoom(room);\n      room.on(\"participantConnected\", participantConnected);\n      room.on(\"participantDisconnected\", participantDisconnected);\n      room.participants.forEach(participantConnected);\n    });\n\n    return () => {\n      setRoom(currentRoom => {\n        if (currentRoom && currentRoom.localParticipant.state === \"connected\") {\n          currentRoom.localParticipant.tracks.forEach(function(\n            trackPublication\n          ) {\n            trackPublication.track.stop();\n          });\n          currentRoom.disconnect();\n          return null;\n        } else {\n          return currentRoom;\n        }\n      });\n    };\n  }, [roomName, token]);\n\n  const handleCallDisconnect = () => {\n    handleLogout();\n    room.disconnect();\n    window.close();\n  };\n\n  const handleAudioToggle = () => {\n    room.localParticipant.audioTracks.forEach(track => {\n      if (track.track.isEnabled) {\n        track.track.disable();\n      } else {\n        track.track.enable();\n      }\n      setToggleAudio(track.track.isEnabled);\n    });\n  };\n\n  const handleVideoToggle = () => {\n    room.localParticipant.videoTracks.forEach(track => {\n        console.log(track);\n      if (track.track.isEnabled && track.trackName !== 'screen') {\n        track.track.disable();\n      } else {\n        track.track.enable();\n      }\n      setToggleVideo(track.track.isEnabled);\n    });\n  };\n\n   const handleScreenToggle = () => {\n    //room.localParticipant.publishTrack(screenTrack);\n    if (screenStream) {\n        room.localParticipant.videoTracks.forEach(track => {\n            console.log(track);\n            if (track.track.isEnabled && track.trackName === 'screen') {\n                track.track.disable();\n            } else {\n                track.track.enable();\n            }\n            setToggleScreenShare(track.track.isEnabled);\n        });\n\n        // setScreenStream(null);\n    } else {\n      navigator.mediaDevices.getDisplayMedia().then(_screenStream => {\n        console.log(_screenStream);\n        if (_screenStream) {\n          const screenTrack = _screenStream.getVideoTracks()[0];\n          const tracks = Array.from(room.localParticipant.videoTracks.values());\n          console.log('Screen track', screenTrack);\n          window.room = room;\n          // const tracks = Array.from(room.localParticipant.tracks.values());\n          // console.log(tracks);\n          // room.localParticipant.unpublishTracks(tracks);\n          if (tracks.length) {\n           //console.log('unpublish track');\n           //room.localParticipant.unpublishTrack(tracks[0].track);\n          }\n          // log(room.localParticipant.identity   \" removed track: \"   tracks[0].kind);\n          // detachTracks(tracks);\n    \n          // room.localParticipant.publishTrack(localScreenTrack);\n          room.localParticipant.publishTrack(screenTrack, { name: 'screen' });\n          setToggleScreenShare(true);\n          // log(localParticipant.identity   \" added track: \"   localVideoTrack.kind);\n          console.log( window.room, room, 'published track', screenTrack);\n          // room.localParticipant.videoTracks.forEach(track => {\n          //   if (track.track.isEnabled) {\n          //     track.track.disable();\n          //   } else {\n          //     track.track.enable();\n          //   }\n          //   setToggleVideo(track.track.isEnabled);\n          // });\n          setScreenStream(_screenStream);\n        }\n      });\n      // console.log(_screenStream);\n        // Video.createLocalVideoTrack({\n        //   // deviceId: { exact: select.value }\n        // }).then(function(screenTrack) {\n        //   const tracks = Array.from(room.localParticipant.videoTracks.values());\n        //   window.room = room;\n        //   // const tracks = Array.from(room.localParticipant.tracks.values());\n        //   // console.log(tracks);\n        //   // room.localParticipant.unpublishTracks(tracks);\n        //   room.localParticipant.unpublishTrack(tracks[0].track);\n        //   // log(room.localParticipant.identity   \" removed track: \"   tracks[0].kind);\n        //   // detachTracks(tracks);\n    \n        //   room.localParticipant.publishTrack(screenTrack);\n        //   // log(localParticipant.identity   \" added track: \"   localVideoTrack.kind);\n        //   const previewContainer = document.getElementById('local-media');\n        //   // attachTracks([localVideoTrack], previewContainer);\n        // });\n        // console.log(screenTrack);\n        // room.localParticipant.unpublishTracks(screenTrack);\n        // room.localParticipant.publishTrack(screenTrack);\n        // room.localParticipant.videoTracks = screenStream.getVideoTracks();\n        // room.localParticipant.audioTracks = screenStream.getAudioTracks();\n  \n        // room.localParticipant.videoTracks.forEach(track => {\n        //   if (track.track.isEnabled) {\n        //     track.track.disable();\n        //   } else {\n        //     track.track.enable();\n        //   }\n        // });\n        // use stream track properties\n        // const screenTracks = screenStream.getVideoTracks();\n        // let videoStream;\n        // if (screenTracks.length) {\n        //  videoStream = screenTracks[0] \n        //}\n  \n        //console.log(_screenStream, \"--------------------\");\n        //console.log(_screenStream.getVideoTracks());\n      }\n    }\n\n\n    //room.localParticipant.videoTracks = screenStream.getVideoTracks();\n    //room.localParticipant.audioTracks = screenStream.getAudioTracks();\n    /*\n    room.localParticipant.videoTracks.forEach(track => {\n      if (track.track.isEnabled) {\n        track.track.disable();\n      } else {\n        track.track.enable();\n      }\n    });\n    */\n    // NOTE: Most important - in order to display inside a video element, set videoElement.srcObject = screenStream;\n    // videoElement.srcObject = screenStream;\n\n    // setToggleScreenShare();\n    // use stream track properties\n    // const screenTracks = screenStream.getVideoTracks();\n    // let videoStream;\n    // if (screenTracks.length) {\n    //  videoStream = screenTracks[0] \n    //}\n    // do what you want with the videoStream variable, as this contains the screenshare content\n\n  const remoteParticipants = participants.map(participant => (\n    <Participant\n      key={participant.sid}\n      participant={participant}\n      isLocal={false}\n    />\n  ));\n\n  return (\n    <div className=\"room\">\n      <div className=\"local-participant\">\n        {room ? (\n          <Participant\n            key={room.localParticipant.sid}\n            participant={room.localParticipant}\n            handleAudioToggle={handleAudioToggle}\n            handleVideoToggle={handleVideoToggle}\n            handleCallDisconnect={handleCallDisconnect}\n            toggleAudio={toggleAudio}\n            toggleVideo={toggleVideo}\n            isLocal={true}\n            isSharingScreen={toggleScreenShare}\n          />\n        ) : (\n          \"\"\n        )}\n      </div>\n      <div className=\"remote-participants\">{remoteParticipants}</div>\n      <Controls\n          handleCallDisconnect={handleCallDisconnect}\n          handleAudioToggle={handleAudioToggle}\n          handleVideoToggle={handleVideoToggle}\n          handleScreenToggle={handleScreenToggle}\n          audio={toggleAudio}\n          video={toggleVideo}\n          screen={toggleScreenShare}\n        />\n    </div>\n  );\n};\n\nexport default Room;\n","import React, { useState, useCallback } from 'react';\nimport Lobby from './Lobby';\nimport Room from './Room';\n\nconst VideoChat = () => {\n  const [username, setUsername] = useState('');\n  const [roomName, setRoomName] = useState('');\n  const [token, setToken] = useState(null);\n\n  const handleUsernameChange = useCallback(event => {\n    setUsername(event.target.value);\n  }, []);\n\n  const handleRoomNameChange = useCallback(event => {\n    setRoomName(event.target.value);\n  }, []);\n\n  const handleSubmit = useCallback(\n    async event => {\n      event.preventDefault();\n        const data = await fetch('/video/token', {\n        method: 'POST',\n        body: JSON.stringify({\n          identity: username,\n          room: roomName\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(res => res.json());\n      setToken(data.token);\n    },\n    [roomName, username]\n  );\n\n  const handleLogout = useCallback(event => {\n    setToken(null);\n  }, []);\n\n  let render;\n  if (token) {\n    render = (\n      <Room roomName={roomName} token={token} handleLogout={handleLogout} />\n    );\n  } else {\n    render = (\n      <Lobby\n        username={username}\n        roomName={roomName}\n        handleUsernameChange={handleUsernameChange}\n        handleRoomNameChange={handleRoomNameChange}\n        handleSubmit={handleSubmit}\n      />\n    );\n  }\n  return render;\n};\n\nexport default VideoChat;\n","import React from 'react';\nimport './App.css';\nimport VideoChat from './VideoChat';\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <main>\n        <VideoChat />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo_webbanner.1f2ecda3.png\";","module.exports = __webpack_public_path__ + \"static/media/1on1_asset.81cf532f.svg\";","module.exports = __webpack_public_path__ + \"static/media/MIC_ON.31971651.svg\";","module.exports = __webpack_public_path__ + \"static/media/MIC_OFF.a7b26dd1.svg\";","module.exports = __webpack_public_path__ + \"static/media/VIDEO_ON.b7de8bfe.svg\";","module.exports = __webpack_public_path__ + \"static/media/VIDEO_OFF.10e9454f.svg\";","module.exports = __webpack_public_path__ + \"static/media/SCREENSHARE_ON.da09c0d4.svg\";","module.exports = __webpack_public_path__ + \"static/media/SCREENSHARE_OFF.16ace628.svg\";","module.exports = __webpack_public_path__ + \"static/media/ENDCALL.f27dcf5d.svg\";"],"sourceRoot":""}